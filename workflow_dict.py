class worfklow_dict:
    def __init__(self):
        self.help_general = {
            "input": "In case of vcf, the input file must end with .csv and in case of plink, it must end with .p.csv",
            "outDir ": "Path to the directory, where all the outputs will be stored. If the directory is not present, it will be created.",
            "sample_map": "Path to the sample map file(must end with .map).Format:first column as sample id and second column as population id.Required only if the input is vcf.",
            "color_map": "Path to the file containing population name as first column and color in hex codes as second column.Must end with .map",
            "outprefix": "prefix of the outputs generated by the workflow",
            "max_chrom": "Maximum number of chromosomes to be considered for the analyses, note that the workflow deals only with the autosomal chromosomes.",
            "allow_extra_chrom": "set this argument to true if the chromosome id contains a string, default: false",
            "chrom_length_map": "If the inputs are plink binary files, map file is needed to set the chromosome id and its respective size in the vcf header, If not provided, the greatest coordinate for each chromosome will be considered as its total size. The file must end with .map.",
            "fasta": "If the inputs are plink binary files, fasta file is needed to set the reference allele in the converted vcf files. If not provided, the major allele will be set as the reference allele for all positions for all analyses",
            "outgroup": "The population id to be used as an outgroup in the following analyses: 1). treemix --> as a root in ML phylogenetic tree, 2). Fst- and IBS-based NJ clustering --> as a root, 3). signature of selection --> to determine the ancestral and derived alleles",
        }

        self.param_general = {
            "input": "null",
            "outDir": "scalepopgn",
            "sample_map": "null",
            "color_map": "null",
            "outprefix": "scalepopgen",
            "max_chrom": 29,
            "allow_extra_chrom": False,
            "chrom_length_map": "null",
            "fasta": "null",
            "outgroup": "null",
        }

        self.help_filtering = {
            "apply_indi_filters": "Perform sample filtering?",
            "king_cutoff": "Threshold of relatedness to remove samples",
            "mind": "Threshold of missing genotypes to remove samples",
            "rem_indi": "Remove custom samples",
            "apply_snp_filters": "Perform site filtering?",
            "rem_snps": "Remove custom sites",
            "maf": "Threshold of minor allele frequency to remove sites",
            "min_meanDP": "Lower threshold of average depth to remove sites",
            "max_meanDP": "Upper threshold of average depth to remove sites",
            "hwe": "Threshold of HWE p-value to remove sites",
            "max_missing": "Threshold of missing genotypes to remove sites",
            "minQ": "Threshold of quality to remove sites",
            "indiv_summary": "Calculate sample-based summary statistics?",
        }

        self.param_filtering = {
            "apply_indi_filters": False,
            "king_cutoff": 0.0884,
            "mind": 0.05,
            "rem_indi": "null",
            "apply_snp_filters": False,
            "rem_snps": "null",
            "maf": 0.05,
            "min_meanDP": "null",
            "max_meanDP": "null",
            "hwe": "null",
            "max_missing": 0.05,
            "minQ": "null",
            "indiv_summary": False,
        }

        self.genetic_structure = {
            "genetic_structure": "false",
            "rem_indi_structure": "null",
            "ld_filt": "false",
            "ld_window_size": 50,
            "ld_step_size": 10,
            "r2_threshold": 0.1,
            "smartpca": "false",
            "smartpca_param": "null",
            "pca_plot_yml": "popgen48-scalepopgen/extra/plots/pca.yml",
            "marker_map": "null",
            "chrom_map": "null",
            "admixture": "false",
            "start_k": 2,
            "end_k": 21,
            "admixture_args": "--cv=5",
            "admixture_colors": "popgen48-scalepopgen/extra/hexcolorcodes.txt",
            "admixture_plot_pop_order": "null",
            "admixture_plot_yml": "popgen48-scalepopgen/extra/plots/admixture.yml",
            "pairwise_global_fst": "false",
            "fst_plot_yml": "popgen48-scalepopgen/extra/plots/fst_nj.yml",
            "ibs_dist": "false",
            "ibs_plot_yml": "popgen48-scalepopgen/extra/plots/ibs_nj.yml",
        }

        self.treemix_options = {
            "treemix": "false",
            "k_snps": 500,
            "treemix_args": "null",
            "n_bootstrap": 5,
            "set_random_seed": "true",
            "n_mig": 4,
            "n_iter": 3,
            "rand_k_snps": "true",
        }

        self.selection_options = {
            "min_sample_size": 8,
            "skip_pop": "null",
            "skip_outgroup": "false",
            "selection_plot_yml": "popgen48-scalepopgen/extra/plots/manhattanplot.yml",
            "pairwise_local_fst": "true",
            "fst_one_vs_all": "true",
            "tajimas_d": "true",
            "pi_val": "true",
            "skip_chromwise": "false",
            "window_size": 50000,
            "step_size": 50000,
            "perc_threshold": 0.01,
        }
